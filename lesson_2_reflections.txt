What happens when you initialize a repository? Why do you need to do it?

    To allow git to create the files it needs to track everything.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area has files in a state you want to preserve in history, the ones you are ready to commit to the project history. The working directory has files that still need work before being ready for prime time. The repository has all the various saved states of all committed files.

How can you use the staging area to make sure you have one commit per logical
change?

    Only stage the files related to any given logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    You can choose when to take a stab at a new aspect of your project without endangering your working code base, and when the next logical change is in your project.

How do the diagrams help you visualize the branch structure?

    By allowing you to see the relationships between commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is to have all the original code intact but add the changes developed in the merging branch. It is represented as showing the master receiving the changes.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
